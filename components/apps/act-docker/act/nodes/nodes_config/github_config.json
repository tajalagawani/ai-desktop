{
  "node_info": {
    "name": "github",
    "display_name": "GitHub",
    "description": "Comprehensive GitHub API integration for repositories, issues, pull requests, and more",
    "version": "1.0.0",
    "category": "development",
    "vendor": "github",
    "documentation": "https://docs.github.com/en/rest",
    "repository": "https://github.com/github/rest-api-description",
    "icon": "üêô",
    "tags": ["git", "repository", "issues", "pull-requests", "github", "version-control", "ci-cd"],
    "author": "ACT Workflow Team",
    "license": "MIT",
    "status": "production"
  },

  "config": {
    "base_url": "https://api.github.com",
    "authentication": {
      "type": "bearer_token",
      "header": "Authorization"
    },
    "default_headers": {
      "Accept": "application/vnd.github.v3+json",
      "User-Agent": "ACT-Workflow/1.0",
      "X-GitHub-Api-Version": "2022-11-28"
    },
    "retry_config": {
      "max_attempts": 3,
      "backoff": "exponential",
      "retriable_codes": [429, 500, 502, 503, 504]
    },
    "rate_limiting": {
      "requests_per_second": 30,
      "burst_size": 60
    },
    "timeouts": {
      "connect": 10.0,
      "read": 30.0,
      "total": 60.0
    }
  },

  "operations": {
    "get_user": {
      "method": "GET",
      "endpoint": "/user",
      "required_params": [],
      "description": "Get the authenticated user",
      "group": "Users"
    },
    "get_user_by_username": {
      "method": "GET",
      "endpoint": "/users/{username}",
      "required_params": ["username"],
      "path_params": ["username"],
      "description": "Get a user by username",
      "group": "Users"
    },
    "list_user_repos": {
      "method": "GET",
      "endpoint": "/user/repos",
      "required_params": [],
      "description": "List repositories for authenticated user",
      "group": "Repositories"
    },
    "list_user_repos_by_username": {
      "method": "GET",
      "endpoint": "/users/{username}/repos",
      "required_params": ["username"],
      "path_params": ["username"],
      "description": "List public repositories for a user",
      "group": "Repositories"
    },
    "get_repo": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}",
      "required_params": ["owner", "repo"],
      "path_params": ["owner", "repo"],
      "description": "Get a repository",
      "group": "Repositories"
    },
    "create_repo": {
      "method": "POST",
      "endpoint": "/user/repos",
      "required_params": ["name"],
      "description": "Create a repository for authenticated user",
      "group": "Repositories"
    },
    "create_org_repo": {
      "method": "POST",
      "endpoint": "/orgs/{org}/repos",
      "required_params": ["org", "name"],
      "path_params": ["org"],
      "description": "Create a repository in an organization",
      "group": "Repositories"
    },
    "update_repo": {
      "method": "PATCH",
      "endpoint": "/repos/{owner}/{repo}",
      "required_params": ["owner", "repo"],
      "path_params": ["owner", "repo"],
      "description": "Update a repository",
      "group": "Repositories"
    },
    "delete_repo": {
      "method": "DELETE",
      "endpoint": "/repos/{owner}/{repo}",
      "required_params": ["owner", "repo"],
      "path_params": ["owner", "repo"],
      "description": "Delete a repository",
      "group": "Repositories"
    },
    "fork_repo": {
      "method": "POST",
      "endpoint": "/repos/{owner}/{repo}/forks",
      "required_params": ["owner", "repo"],
      "path_params": ["owner", "repo"],
      "description": "Create a fork",
      "group": "Repositories"
    },
    
    "list_issues": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/issues",
      "required_params": ["owner", "repo"],
      "path_params": ["owner", "repo"],
      "description": "List repository issues",
      "group": "Issues"
    },
    "get_issue": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/issues/{issue_number}",
      "required_params": ["owner", "repo", "issue_number"],
      "path_params": ["owner", "repo", "issue_number"],
      "description": "Get an issue",
      "group": "Issues"
    },
    "create_issue": {
      "method": "POST",
      "endpoint": "/repos/{owner}/{repo}/issues",
      "required_params": ["owner", "repo", "title"],
      "path_params": ["owner", "repo"],
      "description": "Create an issue",
      "group": "Issues"
    },
    "update_issue": {
      "method": "PATCH",
      "endpoint": "/repos/{owner}/{repo}/issues/{issue_number}",
      "required_params": ["owner", "repo", "issue_number"],
      "path_params": ["owner", "repo", "issue_number"],
      "description": "Update an issue",
      "group": "Issues"
    },
    "close_issue": {
      "method": "PATCH",
      "endpoint": "/repos/{owner}/{repo}/issues/{issue_number}",
      "required_params": ["owner", "repo", "issue_number"],
      "path_params": ["owner", "repo", "issue_number"],
      "description": "Close an issue",
      "group": "Issues"
    },
    "add_labels_to_issue": {
      "method": "POST",
      "endpoint": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
      "required_params": ["owner", "repo", "issue_number", "labels"],
      "path_params": ["owner", "repo", "issue_number"],
      "description": "Add labels to issue",
      "group": "Issues"
    },
    "remove_label_from_issue": {
      "method": "DELETE",
      "endpoint": "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}",
      "required_params": ["owner", "repo", "issue_number", "name"],
      "path_params": ["owner", "repo", "issue_number", "name"],
      "description": "Remove label from issue",
      "group": "Issues"
    },
    
    "list_pull_requests": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/pulls",
      "required_params": ["owner", "repo"],
      "path_params": ["owner", "repo"],
      "description": "List pull requests",
      "group": "Pull Requests"
    },
    "get_pull_request": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/pulls/{pull_number}",
      "required_params": ["owner", "repo", "pull_number"],
      "path_params": ["owner", "repo", "pull_number"],
      "description": "Get a pull request",
      "group": "Pull Requests"
    },
    "create_pull_request": {
      "method": "POST",
      "endpoint": "/repos/{owner}/{repo}/pulls",
      "required_params": ["owner", "repo", "title", "head", "base"],
      "path_params": ["owner", "repo"],
      "description": "Create a pull request",
      "group": "Pull Requests"
    },
    "update_pull_request": {
      "method": "PATCH",
      "endpoint": "/repos/{owner}/{repo}/pulls/{pull_number}",
      "required_params": ["owner", "repo", "pull_number"],
      "path_params": ["owner", "repo", "pull_number"],
      "description": "Update a pull request",
      "group": "Pull Requests"
    },
    "merge_pull_request": {
      "method": "PUT",
      "endpoint": "/repos/{owner}/{repo}/pulls/{pull_number}/merge",
      "required_params": ["owner", "repo", "pull_number"],
      "path_params": ["owner", "repo", "pull_number"],
      "description": "Merge a pull request",
      "group": "Pull Requests"
    },
    "close_pull_request": {
      "method": "PATCH",
      "endpoint": "/repos/{owner}/{repo}/pulls/{pull_number}",
      "required_params": ["owner", "repo", "pull_number"],
      "path_params": ["owner", "repo", "pull_number"],
      "description": "Close a pull request",
      "group": "Pull Requests"
    },
    
    "list_branches": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/branches",
      "required_params": ["owner", "repo"],
      "path_params": ["owner", "repo"],
      "description": "List branches",
      "group": "Branches"
    },
    "get_branch": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/branches/{branch}",
      "required_params": ["owner", "repo", "branch"],
      "path_params": ["owner", "repo", "branch"],
      "description": "Get a branch",
      "group": "Branches"
    },
    "create_branch": {
      "method": "POST",
      "endpoint": "/repos/{owner}/{repo}/git/refs",
      "required_params": ["owner", "repo", "ref", "sha"],
      "path_params": ["owner", "repo"],
      "description": "Create a branch",
      "group": "Branches"
    },
    "delete_branch": {
      "method": "DELETE",
      "endpoint": "/repos/{owner}/{repo}/git/refs/{ref}",
      "required_params": ["owner", "repo", "ref"],
      "path_params": ["owner", "repo", "ref"],
      "description": "Delete a branch",
      "group": "Branches"
    },
    
    "list_commits": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/commits",
      "required_params": ["owner", "repo"],
      "path_params": ["owner", "repo"],
      "description": "List commits",
      "group": "Commits"
    },
    "get_commit": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/commits/{ref}",
      "required_params": ["owner", "repo", "ref"],
      "path_params": ["owner", "repo", "ref"],
      "description": "Get a commit",
      "group": "Commits"
    },
    "create_commit": {
      "method": "POST",
      "endpoint": "/repos/{owner}/{repo}/git/commits",
      "required_params": ["owner", "repo", "message", "tree"],
      "path_params": ["owner", "repo"],
      "description": "Create a commit",
      "group": "Commits"
    },
    
    "get_file_contents": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/contents/{path}",
      "required_params": ["owner", "repo", "path"],
      "path_params": ["owner", "repo", "path"],
      "description": "Get file contents",
      "group": "Contents"
    },
    "create_file": {
      "method": "PUT",
      "endpoint": "/repos/{owner}/{repo}/contents/{path}",
      "required_params": ["owner", "repo", "path", "message", "content"],
      "path_params": ["owner", "repo", "path"],
      "description": "Create a file",
      "group": "Contents"
    },
    "update_file": {
      "method": "PUT",
      "endpoint": "/repos/{owner}/{repo}/contents/{path}",
      "required_params": ["owner", "repo", "path", "message", "content", "sha"],
      "path_params": ["owner", "repo", "path"],
      "description": "Update a file",
      "group": "Contents"
    },
    "delete_file": {
      "method": "DELETE",
      "endpoint": "/repos/{owner}/{repo}/contents/{path}",
      "required_params": ["owner", "repo", "path", "message", "sha"],
      "path_params": ["owner", "repo", "path"],
      "description": "Delete a file",
      "group": "Contents"
    },
    
    "list_releases": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/releases",
      "required_params": ["owner", "repo"],
      "path_params": ["owner", "repo"],
      "description": "List releases",
      "group": "Releases"
    },
    "get_release": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/releases/{release_id}",
      "required_params": ["owner", "repo", "release_id"],
      "path_params": ["owner", "repo", "release_id"],
      "description": "Get a release",
      "group": "Releases"
    },
    "create_release": {
      "method": "POST",
      "endpoint": "/repos/{owner}/{repo}/releases",
      "required_params": ["owner", "repo", "tag_name"],
      "path_params": ["owner", "repo"],
      "description": "Create a release",
      "group": "Releases"
    },
    "update_release": {
      "method": "PATCH",
      "endpoint": "/repos/{owner}/{repo}/releases/{release_id}",
      "required_params": ["owner", "repo", "release_id"],
      "path_params": ["owner", "repo", "release_id"],
      "description": "Update a release",
      "group": "Releases"
    },
    "delete_release": {
      "method": "DELETE",
      "endpoint": "/repos/{owner}/{repo}/releases/{release_id}",
      "required_params": ["owner", "repo", "release_id"],
      "path_params": ["owner", "repo", "release_id"],
      "description": "Delete a release",
      "group": "Releases"
    },
    
    "list_collaborators": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/collaborators",
      "required_params": ["owner", "repo"],
      "path_params": ["owner", "repo"],
      "description": "List repository collaborators",
      "group": "Collaborators"
    },
    "check_collaborator": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/collaborators/{username}",
      "required_params": ["owner", "repo", "username"],
      "path_params": ["owner", "repo", "username"],
      "description": "Check if user is a collaborator",
      "group": "Collaborators"
    },
    "add_collaborator": {
      "method": "PUT",
      "endpoint": "/repos/{owner}/{repo}/collaborators/{username}",
      "required_params": ["owner", "repo", "username"],
      "path_params": ["owner", "repo", "username"],
      "description": "Add a repository collaborator",
      "group": "Collaborators"
    },
    "remove_collaborator": {
      "method": "DELETE",
      "endpoint": "/repos/{owner}/{repo}/collaborators/{username}",
      "required_params": ["owner", "repo", "username"],
      "path_params": ["owner", "repo", "username"],
      "description": "Remove a repository collaborator",
      "group": "Collaborators"
    },
    
    "list_workflows": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/actions/workflows",
      "required_params": ["owner", "repo"],
      "path_params": ["owner", "repo"],
      "description": "List repository workflows",
      "group": "Actions"
    },
    "get_workflow": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}",
      "required_params": ["owner", "repo", "workflow_id"],
      "path_params": ["owner", "repo", "workflow_id"],
      "description": "Get a workflow",
      "group": "Actions"
    },
    "list_workflow_runs": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/actions/runs",
      "required_params": ["owner", "repo"],
      "path_params": ["owner", "repo"],
      "description": "List workflow runs",
      "group": "Actions"
    },
    "get_workflow_run": {
      "method": "GET",
      "endpoint": "/repos/{owner}/{repo}/actions/runs/{run_id}",
      "required_params": ["owner", "repo", "run_id"],
      "path_params": ["owner", "repo", "run_id"],
      "description": "Get a workflow run",
      "group": "Actions"
    },
    "cancel_workflow_run": {
      "method": "POST",
      "endpoint": "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel",
      "required_params": ["owner", "repo", "run_id"],
      "path_params": ["owner", "repo", "run_id"],
      "description": "Cancel a workflow run",
      "group": "Actions"
    },
    "rerun_workflow": {
      "method": "POST",
      "endpoint": "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun",
      "required_params": ["owner", "repo", "run_id"],
      "path_params": ["owner", "repo", "run_id"],
      "description": "Re-run a workflow",
      "group": "Actions"
    },
    "trigger_workflow_dispatch": {
      "method": "POST",
      "endpoint": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches",
      "required_params": ["owner", "repo", "workflow_id", "ref"],
      "path_params": ["owner", "repo", "workflow_id"],
      "description": "Create a workflow dispatch event",
      "group": "Actions"
    }
  },

  "parameters": [
    {
      "name": "operation",
      "type": "string",
      "description": "The GitHub operation to perform",
      "required": true,
      "group": "Core"
    },
    {
      "name": "token",
      "type": "string",
      "description": "GitHub personal access token or app token",
      "required": true,
      "sensitive": true,
      "group": "Authentication"
    },
    
    {
      "name": "owner",
      "type": "string",
      "description": "Repository owner (username or organization)",
      "required": false,
      "group": "Repository"
    },
    {
      "name": "repo",
      "type": "string",
      "description": "Repository name",
      "required": false,
      "group": "Repository"
    },
    {
      "name": "username",
      "type": "string",
      "description": "GitHub username",
      "required": false,
      "group": "User"
    },
    {
      "name": "org",
      "type": "string",
      "description": "Organization name",
      "required": false,
      "group": "Organization"
    },
    
    {
      "name": "name",
      "type": "string",
      "description": "Repository name for creation",
      "required": false,
      "group": "Repository"
    },
    {
      "name": "description",
      "type": "string",
      "description": "Repository description",
      "required": false,
      "group": "Repository"
    },
    {
      "name": "homepage",
      "type": "string",
      "description": "Repository homepage URL",
      "required": false,
      "group": "Repository"
    },
    {
      "name": "private",
      "type": "boolean",
      "description": "Whether repository is private",
      "required": false,
      "default": false,
      "group": "Repository"
    },
    {
      "name": "has_issues",
      "type": "boolean",
      "description": "Whether to enable issues",
      "required": false,
      "default": true,
      "group": "Repository"
    },
    {
      "name": "has_projects",
      "type": "boolean",
      "description": "Whether to enable projects",
      "required": false,
      "default": true,
      "group": "Repository"
    },
    {
      "name": "has_wiki",
      "type": "boolean",
      "description": "Whether to enable wiki",
      "required": false,
      "default": true,
      "group": "Repository"
    },
    {
      "name": "auto_init",
      "type": "boolean",
      "description": "Whether to create initial commit",
      "required": false,
      "default": false,
      "group": "Repository"
    },
    {
      "name": "gitignore_template",
      "type": "string",
      "description": ".gitignore template to use",
      "required": false,
      "group": "Repository"
    },
    {
      "name": "license_template",
      "type": "string",
      "description": "License template to use",
      "required": false,
      "group": "Repository"
    },
    {
      "name": "allow_squash_merge",
      "type": "boolean",
      "description": "Whether to allow squash merges",
      "required": false,
      "default": true,
      "group": "Repository"
    },
    {
      "name": "allow_merge_commit",
      "type": "boolean",
      "description": "Whether to allow merge commits",
      "required": false,
      "default": true,
      "group": "Repository"
    },
    {
      "name": "allow_rebase_merge",
      "type": "boolean",
      "description": "Whether to allow rebase merges",
      "required": false,
      "default": true,
      "group": "Repository"
    },
    {
      "name": "delete_branch_on_merge",
      "type": "boolean",
      "description": "Whether to delete head branches on merge",
      "required": false,
      "default": false,
      "group": "Repository"
    },
    
    {
      "name": "issue_number",
      "type": "number",
      "description": "Issue number",
      "required": false,
      "group": "Issues"
    },
    {
      "name": "title",
      "type": "string",
      "description": "Issue or PR title",
      "required": false,
      "group": "Issues"
    },
    {
      "name": "body",
      "type": "string",
      "description": "Issue or PR body/description",
      "required": false,
      "group": "Issues"
    },
    {
      "name": "assignee",
      "type": "string",
      "description": "Login for the user to assign",
      "required": false,
      "group": "Issues"
    },
    {
      "name": "assignees",
      "type": "array",
      "description": "Logins for users to assign",
      "required": false,
      "group": "Issues"
    },
    {
      "name": "milestone",
      "type": "number",
      "description": "Milestone number",
      "required": false,
      "group": "Issues"
    },
    {
      "name": "labels",
      "type": "array",
      "description": "Array of label names",
      "required": false,
      "group": "Issues"
    },
    {
      "name": "state",
      "type": "string",
      "description": "State of issue or PR",
      "required": false,
      "options": ["open", "closed", "all"],
      "default": "open",
      "group": "Issues"
    },
    
    {
      "name": "pull_number",
      "type": "number",
      "description": "Pull request number",
      "required": false,
      "group": "Pull Requests"
    },
    {
      "name": "head",
      "type": "string",
      "description": "The name of the branch where your changes are",
      "required": false,
      "group": "Pull Requests"
    },
    {
      "name": "base",
      "type": "string",
      "description": "The name of the branch you want changes pulled into",
      "required": false,
      "group": "Pull Requests"
    },
    {
      "name": "draft",
      "type": "boolean",
      "description": "Whether to create as draft PR",
      "required": false,
      "default": false,
      "group": "Pull Requests"
    },
    {
      "name": "maintainer_can_modify",
      "type": "boolean",
      "description": "Whether maintainers can edit the PR",
      "required": false,
      "default": true,
      "group": "Pull Requests"
    },
    {
      "name": "commit_title",
      "type": "string",
      "description": "Title for merge commit",
      "required": false,
      "group": "Pull Requests"
    },
    {
      "name": "commit_message",
      "type": "string",
      "description": "Message for merge commit",
      "required": false,
      "group": "Pull Requests"
    },
    {
      "name": "merge_method",
      "type": "string",
      "description": "Merge method to use",
      "required": false,
      "options": ["merge", "squash", "rebase"],
      "default": "merge",
      "group": "Pull Requests"
    },
    
    {
      "name": "branch",
      "type": "string",
      "description": "Branch name",
      "required": false,
      "group": "Branches"
    },
    {
      "name": "ref",
      "type": "string",
      "description": "Git reference (branch, tag, or SHA)",
      "required": false,
      "group": "Git"
    },
    {
      "name": "sha",
      "type": "string",
      "description": "SHA hash of Git object",
      "required": false,
      "group": "Git"
    },
    {
      "name": "tree",
      "type": "string",
      "description": "SHA of tree object",
      "required": false,
      "group": "Git"
    },
    {
      "name": "parents",
      "type": "array",
      "description": "Array of parent commit SHAs",
      "required": false,
      "group": "Git"
    },
    {
      "name": "message",
      "type": "string",
      "description": "Commit message",
      "required": false,
      "group": "Git"
    },
    {
      "name": "author",
      "type": "object",
      "description": "Author information",
      "required": false,
      "group": "Git"
    },
    {
      "name": "committer",
      "type": "object",
      "description": "Committer information",
      "required": false,
      "group": "Git"
    },
    
    {
      "name": "path",
      "type": "string",
      "description": "File path in repository",
      "required": false,
      "group": "Contents"
    },
    {
      "name": "content",
      "type": "string",
      "description": "File content (base64 encoded for binary files)",
      "required": false,
      "group": "Contents"
    },
    {
      "name": "encoding",
      "type": "string",
      "description": "Content encoding",
      "required": false,
      "default": "utf-8",
      "options": ["utf-8", "base64"],
      "group": "Contents"
    },
    
    {
      "name": "tag_name",
      "type": "string",
      "description": "Tag name for release",
      "required": false,
      "group": "Releases"
    },
    {
      "name": "target_commitish",
      "type": "string",
      "description": "Commit to tag for release",
      "required": false,
      "group": "Releases"
    },
    {
      "name": "release_name",
      "type": "string",
      "description": "Name of the release",
      "required": false,
      "group": "Releases"
    },
    {
      "name": "release_body",
      "type": "string",
      "description": "Description of the release",
      "required": false,
      "group": "Releases"
    },
    {
      "name": "prerelease",
      "type": "boolean",
      "description": "Whether it's a prerelease",
      "required": false,
      "default": false,
      "group": "Releases"
    },
    {
      "name": "draft_release",
      "type": "boolean",
      "description": "Whether it's a draft release",
      "required": false,
      "default": false,
      "group": "Releases"
    },
    {
      "name": "generate_release_notes",
      "type": "boolean",
      "description": "Whether to auto-generate release notes",
      "required": false,
      "default": false,
      "group": "Releases"
    },
    {
      "name": "release_id",
      "type": "number",
      "description": "Release ID",
      "required": false,
      "group": "Releases"
    },
    
    {
      "name": "permission",
      "type": "string",
      "description": "Permission level for collaborator",
      "required": false,
      "options": ["pull", "push", "admin", "maintain", "triage"],
      "default": "push",
      "group": "Collaborators"
    },
    
    {
      "name": "workflow_id",
      "type": ["string", "number"],
      "description": "Workflow ID or filename",
      "required": false,
      "group": "Actions"
    },
    {
      "name": "run_id",
      "type": "number",
      "description": "Workflow run ID",
      "required": false,
      "group": "Actions"
    },
    {
      "name": "inputs",
      "type": "object",
      "description": "Workflow dispatch inputs",
      "required": false,
      "group": "Actions"
    },
    
    {
      "name": "type",
      "type": "string",
      "description": "Repository type filter",
      "required": false,
      "options": ["all", "owner", "public", "private", "member"],
      "default": "all",
      "group": "Filtering"
    },
    {
      "name": "sort",
      "type": "string",
      "description": "Sort field",
      "required": false,
      "options": ["created", "updated", "pushed", "full_name"],
      "default": "created",
      "group": "Sorting"
    },
    {
      "name": "direction",
      "type": "string",
      "description": "Sort direction",
      "required": false,
      "options": ["asc", "desc"],
      "default": "desc",
      "group": "Sorting"
    },
    {
      "name": "since",
      "type": "string",
      "description": "ISO 8601 datetime to filter by",
      "required": false,
      "group": "Filtering"
    },
    {
      "name": "until",
      "type": "string",
      "description": "ISO 8601 datetime to filter by",
      "required": false,
      "group": "Filtering"
    },
    {
      "name": "per_page",
      "type": "number",
      "description": "Results per page",
      "required": false,
      "default": 30,
      "min": 1,
      "max": 100,
      "group": "Pagination"
    },
    {
      "name": "page",
      "type": "number",
      "description": "Page number",
      "required": false,
      "default": 1,
      "min": 1,
      "group": "Pagination"
    },
    
    {
      "name": "data",
      "type": "object",
      "description": "Additional request data for operations that require a body",
      "required": false,
      "group": "Generic"
    },
    {
      "name": "params",
      "type": "object",
      "description": "Query parameters for the request",
      "required": false,
      "group": "Generic"
    },
    {
      "name": "headers",
      "type": "object",
      "description": "Additional headers for the request",
      "required": false,
      "group": "Generic"
    }
  ],

  "outputs": [
    {
      "name": "success",
      "type": "boolean",
      "description": "Whether the operation was successful"
    },
    {
      "name": "error",
      "type": "string",
      "description": "Error message if operation failed"
    },
    {
      "name": "data",
      "type": "object",
      "description": "Response data from GitHub API"
    },
    {
      "name": "status_code",
      "type": "number",
      "description": "HTTP status code"
    },
    {
      "name": "repo_id",
      "type": "number",
      "description": "Repository ID"
    },
    {
      "name": "issue_id",
      "type": "number",
      "description": "Issue ID"
    },
    {
      "name": "pull_request_id",
      "type": "number",
      "description": "Pull request ID"
    },
    {
      "name": "html_url",
      "type": "string",
      "description": "HTML URL of created resource"
    }
  ],

  "examples": [
    {
      "name": "Create Repository",
      "description": "Create a new repository",
      "operation": "create_repo",
      "parameters": {
        "name": "my-new-repo",
        "description": "A test repository created via API",
        "private": false,
        "auto_init": true,
        "gitignore_template": "Node"
      }
    },
    {
      "name": "Create Issue",
      "description": "Create a new issue in repository",
      "operation": "create_issue",
      "parameters": {
        "owner": "octocat",
        "repo": "Hello-World",
        "title": "Found a bug",
        "body": "Something isn't working as expected",
        "labels": ["bug", "help wanted"]
      }
    },
    {
      "name": "Create Pull Request",
      "description": "Create a new pull request",
      "operation": "create_pull_request",
      "parameters": {
        "owner": "octocat",
        "repo": "Hello-World",
        "title": "Fix bug in main function",
        "body": "This PR fixes the bug reported in issue #123",
        "head": "feature-branch",
        "base": "main"
      }
    },
    {
      "name": "Get File Contents",
      "description": "Get contents of a file from repository",
      "operation": "get_file_contents",
      "parameters": {
        "owner": "octocat",
        "repo": "Hello-World",
        "path": "README.md",
        "ref": "main"
      }
    },
    {
      "name": "Trigger Workflow",
      "description": "Trigger a workflow dispatch event",
      "operation": "trigger_workflow_dispatch",
      "parameters": {
        "owner": "octocat",
        "repo": "Hello-World",
        "workflow_id": "deploy.yml",
        "ref": "main",
        "inputs": {
          "environment": "production",
          "version": "v1.2.3"
        }
      }
    }
  ],

  "error_codes": {
    "200": "OK - Request successful",
    "201": "Created - Resource created successfully",
    "204": "No Content - Request successful, no content returned",
    "304": "Not Modified - Resource not modified",
    "400": "Bad Request - Invalid request parameters",
    "401": "Unauthorized - Invalid or missing authentication",
    "403": "Forbidden - Insufficient permissions or rate limit exceeded",
    "404": "Not Found - Resource not found",
    "409": "Conflict - Resource conflict (e.g., repository already exists)",
    "422": "Unprocessable Entity - Validation failed",
    "500": "Internal Server Error - GitHub server error",
    "502": "Bad Gateway - GitHub server error",
    "503": "Service Unavailable - GitHub service temporarily unavailable"
  }
}