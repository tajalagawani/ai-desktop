[workflow]
name = "Financial Risk Management System with VaR Analytics"
description = "Complete enterprise-grade risk management platform with Value at Risk calculations, stress testing, and AI-powered analysis"
start_node = CleanupRiskDatabase

[parameters]
connection_string = postgresql://neondb_owner:npg_aWbKzVAUTh92@ep-blue-resonance-a8r3rq32-pooler.eastus2.azure.neon.tech/neondb?sslmode=require
portfolio_id = PORTFOLIO_001
calculation_date = 2025-06-05
confidence_level_95 = 0.05
confidence_level_99 = 0.01
time_horizon = 1

[node:CleanupRiskDatabase]
type = neon
label = 0. Cleanup Risk Database
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = DROP SCHEMA IF EXISTS risk_system CASCADE

[node:CreateRiskSchema]
type = neon
label = 1. Create Risk Management Schema
connection_string = {{.Parameter.connection_string}}
operation = create_schema
schema_name = risk_system

[node:CreateInstrumentsTable]
type = neon
label = 2. Create Instruments Table
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = CREATE TABLE risk_system.instruments (id SERIAL PRIMARY KEY, instrument_id VARCHAR(50) UNIQUE NOT NULL, instrument_name VARCHAR(200) NOT NULL, instrument_type VARCHAR(50) NOT NULL, sector VARCHAR(100), currency VARCHAR(3) DEFAULT 'USD', country VARCHAR(100), exchange VARCHAR(100), is_active BOOLEAN DEFAULT true, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)

[node:CreateMarketDataTable]
type = neon
label = 3. Create Market Data Table
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = CREATE TABLE risk_system.market_data (id SERIAL PRIMARY KEY, instrument_id VARCHAR(50) NOT NULL REFERENCES risk_system.instruments(instrument_id), price_date DATE NOT NULL, open_price DECIMAL(15,6), high_price DECIMAL(15,6), low_price DECIMAL(15,6), close_price DECIMAL(15,6) NOT NULL, adjusted_close DECIMAL(15,6), volume BIGINT, volatility DECIMAL(8,4), beta DECIMAL(6,3), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, UNIQUE(instrument_id, price_date))

[node:CreatePortfoliosTable]
type = neon
label = 4. Create Portfolios Table
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = CREATE TABLE risk_system.portfolios (id SERIAL PRIMARY KEY, portfolio_id VARCHAR(50) UNIQUE NOT NULL, portfolio_name VARCHAR(200) NOT NULL, portfolio_manager VARCHAR(100), base_currency VARCHAR(3) DEFAULT 'USD', benchmark VARCHAR(50), inception_date DATE, aum DECIMAL(18,2), risk_budget DECIMAL(8,4), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)

[node:CreatePositionsTable]
type = neon
label = 5. Create Positions Table
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = CREATE TABLE risk_system.positions (id SERIAL PRIMARY KEY, portfolio_id VARCHAR(50) NOT NULL REFERENCES risk_system.portfolios(portfolio_id), instrument_id VARCHAR(50) NOT NULL REFERENCES risk_system.instruments(instrument_id), position_date DATE NOT NULL, quantity DECIMAL(18,6) NOT NULL, market_value DECIMAL(18,2) NOT NULL, weight DECIMAL(8,6), cost_basis DECIMAL(18,2), unrealized_pnl DECIMAL(18,2), duration DECIMAL(8,4), delta DECIMAL(8,4), gamma DECIMAL(8,4), vega DECIMAL(8,4), theta DECIMAL(8,4), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)

[node:CreateRiskFactorsTable]
type = neon
label = 6. Create Risk Factors Table
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = CREATE TABLE risk_system.risk_factors (id SERIAL PRIMARY KEY, factor_name VARCHAR(100) NOT NULL, factor_type VARCHAR(50) NOT NULL, factor_category VARCHAR(50), factor_date DATE NOT NULL, factor_value DECIMAL(15,8) NOT NULL, factor_return DECIMAL(15,8), factor_volatility DECIMAL(8,4), factor_beta DECIMAL(6,3), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, UNIQUE(factor_name, factor_date))

[node:CreateVarCalculationsTable]
type = neon
label = 7. Create VaR Calculations Table
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = CREATE TABLE risk_system.var_calculations (id SERIAL PRIMARY KEY, calculation_id UUID NOT NULL, portfolio_id VARCHAR(50) NOT NULL, calculation_date DATE NOT NULL, methodology VARCHAR(20) NOT NULL, confidence_level DECIMAL(5,4) NOT NULL, time_horizon INTEGER NOT NULL, var_amount DECIMAL(18,2) NOT NULL, var_percentage DECIMAL(8,4), expected_shortfall DECIMAL(18,2), marginal_var DECIMAL(18,2), component_var DECIMAL(18,2), portfolio_value DECIMAL(18,2), portfolio_volatility DECIMAL(8,4), model_parameters JSONB, calculation_time INTERVAL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)

[node:CreateStressScenariosTable]
type = neon
label = 8. Create Stress Scenarios Table
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = CREATE TABLE risk_system.stress_scenarios (id SERIAL PRIMARY KEY, scenario_id UUID UNIQUE NOT NULL, scenario_name VARCHAR(100) NOT NULL, scenario_description TEXT, scenario_type VARCHAR(50), scenario_category VARCHAR(50), factor_shocks JSONB NOT NULL, scenario_probability DECIMAL(5,4), scenario_severity VARCHAR(20), historical_reference TEXT, created_by VARCHAR(100), is_active BOOLEAN DEFAULT true, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)

[node:CreateStressResultsTable]
type = neon
label = 9. Create Stress Test Results Table
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = CREATE TABLE risk_system.stress_results (id SERIAL PRIMARY KEY, stress_id UUID NOT NULL, portfolio_id VARCHAR(50) NOT NULL, scenario_id UUID NOT NULL REFERENCES risk_system.stress_scenarios(scenario_id), test_date DATE NOT NULL, base_portfolio_value DECIMAL(18,2), stressed_portfolio_value DECIMAL(18,2), pnl_impact DECIMAL(18,2), pnl_percentage DECIMAL(8,4), individual_position_impacts JSONB, sector_impacts JSONB, factor_contributions JSONB, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)

[node:CreateRiskReportsTable]
type = neon
label = 10. Create Risk Reports Table
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = CREATE TABLE risk_system.risk_reports (id SERIAL PRIMARY KEY, report_id UUID NOT NULL, report_type VARCHAR(50) NOT NULL, portfolio_id VARCHAR(50), report_date DATE NOT NULL, report_frequency VARCHAR(20), report_content JSONB NOT NULL, ai_narrative TEXT, ai_recommendations TEXT, risk_score INTEGER, regulatory_alerts TEXT, executive_summary TEXT, created_by VARCHAR(100), is_published BOOLEAN DEFAULT false, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)

[node:CreateCorrelationMatrixTable]
type = neon
label = 11. Create Correlation Matrix Table
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = CREATE TABLE risk_system.correlation_matrix (id SERIAL PRIMARY KEY, calculation_date DATE NOT NULL, asset_1 VARCHAR(50) NOT NULL, asset_2 VARCHAR(50) NOT NULL, correlation_coefficient DECIMAL(8,6) NOT NULL, lookback_period INTEGER DEFAULT 252, correlation_type VARCHAR(20) DEFAULT 'pearson', created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, UNIQUE(calculation_date, asset_1, asset_2))

[node:CreateBacktestResultsTable]
type = neon
label = 12. Create Backtest Results Table
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = CREATE TABLE risk_system.backtest_results (id SERIAL PRIMARY KEY, backtest_id UUID NOT NULL, model_name VARCHAR(100) NOT NULL, test_period_start DATE NOT NULL, test_period_end DATE NOT NULL, confidence_level DECIMAL(5,4), total_observations INTEGER, violations INTEGER, violation_rate DECIMAL(8,6), expected_violations INTEGER, kupiec_pof_statistic DECIMAL(10,6), kupiec_p_value DECIMAL(10,6), christoffersen_cc_statistic DECIMAL(10,6), christoffersen_p_value DECIMAL(10,6), model_accuracy_score DECIMAL(8,4), traffic_light_status VARCHAR(10), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)

[node:CreateOperationalIncidentsTable]
type = neon
label = 12a. Create Operational Incidents Table
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = CREATE TABLE risk_system.operational_incidents (id SERIAL PRIMARY KEY, incident_id UUID UNIQUE NOT NULL, incident_date DATE NOT NULL, incident_type VARCHAR(100) NOT NULL, description TEXT NOT NULL, financial_impact DECIMAL(18,2), root_cause TEXT, status VARCHAR(20) DEFAULT 'new', reported_by VARCHAR(100), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)

[node:AddSampleInstruments]
type = neon
label = 13. Add Sample Instruments
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = INSERT INTO risk_system.instruments (instrument_id, instrument_name, instrument_type, sector, currency, country, exchange) VALUES ('AAPL', 'Apple Inc.', 'equity', 'Technology', 'USD', 'United States', 'NASDAQ'), ('MSFT', 'Microsoft Corporation', 'equity', 'Technology', 'USD', 'United States', 'NASDAQ'), ('GOOGL', 'Alphabet Inc.', 'equity', 'Technology', 'USD', 'United States', 'NASDAQ'), ('SPY', 'SPDR S&P 500 ETF', 'etf', 'Broad Market', 'USD', 'United States', 'NYSE'), ('TLT', 'iShares 20+ Year Treasury Bond ETF', 'etf', 'Fixed Income', 'USD', 'United States', 'NASDAQ'), ('GLD', 'SPDR Gold Shares', 'etf', 'Commodities', 'USD', 'United States', 'NYSE'), ('EURUSD', 'Euro/US Dollar', 'fx', 'Currency', 'USD', 'Global', 'FX'), ('US10Y', 'US 10-Year Treasury Yield', 'rates', 'Interest Rates', 'USD', 'United States', 'BOND')

[node:AddSamplePortfolio]
type = neon
label = 14. Add Sample Portfolio
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = INSERT INTO risk_system.portfolios (portfolio_id, portfolio_name, portfolio_manager, base_currency, benchmark, inception_date, aum, risk_budget) VALUES ('PORTFOLIO_001', 'Diversified Growth Portfolio', 'John Risk Manager', 'USD', 'SPY', '2024-01-01', 100000000.00, 0.15), ('PORTFOLIO_002', 'Conservative Income Portfolio', 'Jane Bond Manager', 'USD', 'TLT', '2024-01-01', 50000000.00, 0.08), ('PORTFOLIO_003', 'Aggressive Tech Portfolio', 'Mike Tech Trader', 'USD', 'QQQ', '2024-01-01', 25000000.00, 0.25)

[node:AddSampleMarketData]
type = neon
label = 15. Add Sample Market Data
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = INSERT INTO risk_system.market_data (instrument_id, price_date, open_price, high_price, low_price, close_price, adjusted_close, volume, volatility, beta) VALUES ('AAPL', '2025-06-05', 180.50, 182.75, 179.25, 181.20, 181.20, 65432100, 0.28, 1.15), ('MSFT', '2025-06-05', 420.80, 425.30, 418.90, 423.45, 423.45, 32156780, 0.25, 1.08), ('GOOGL', '2025-06-05', 2750.25, 2785.60, 2740.10, 2768.90, 2768.90, 1876540, 0.32, 1.22), ('SPY', '2025-06-05', 520.15, 522.80, 518.60, 521.45, 521.45, 98765430, 0.18, 1.00), ('TLT', '2025-06-05', 89.25, 89.80, 88.90, 89.35, 89.35, 5432100, 0.15, -0.45), ('GLD', '2025-06-05', 198.75, 200.25, 197.80, 199.60, 199.60, 8765432, 0.20, 0.05), ('EURUSD', '2025-06-05', 1.0875, 1.0895, 1.0860, 1.0882, 1.0882, 0, 0.12, 0.15), ('US10Y', '2025-06-05', 4.25, 4.28, 4.22, 4.26, 4.26, 0, 0.08, 0.02)

[node:AddSamplePositions]
type = neon
label = 16. Add Sample Positions
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = INSERT INTO risk_system.positions (portfolio_id, instrument_id, position_date, quantity, market_value, weight, cost_basis, unrealized_pnl, duration, delta, gamma, vega, theta) VALUES ('PORTFOLIO_001', 'AAPL', '2025-06-05', 50000, 9060000.00, 0.25, 8500000.00, 560000.00, 0, 0.85, 0.15, 0, 0), ('PORTFOLIO_001', 'MSFT', '2025-06-05', 30000, 12703500.00, 0.35, 12000000.00, 703500.00, 0, 0.90, 0.12, 0, 0), ('PORTFOLIO_001', 'SPY', '2025-06-05', 25000, 13036250.00, 0.30, 12500000.00, 536250.00, 0, 0.95, 0.08, 0, 0), ('PORTFOLIO_001', 'TLT', '2025-06-05', 15000, 1340250.00, 0.10, 1350000.00, -9750.00, 12.5, 0.88, 0.05, 250, -15), ('PORTFOLIO_002', 'TLT', '2025-06-05', 300000, 26805000.00, 0.60, 27000000.00, -195000.00, 12.5, 0.88, 0.05, 5000, -300), ('PORTFOLIO_002', 'SPY', '2025-06-05', 40000, 20858000.00, 0.40, 20000000.00, 858000.00, 0, 0.95, 0.08, 0, 0)

[node:AddSampleRiskFactors]
type = neon
label = 17. Add Sample Risk Factors
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = INSERT INTO risk_system.risk_factors (factor_name, factor_type, factor_category, factor_date, factor_value, factor_return, factor_volatility, factor_beta) VALUES ('SP500_INDEX', 'equity', 'market', '2025-06-05', 5214.50, 0.0125, 0.18, 1.00), ('NASDAQ_INDEX', 'equity', 'market', '2025-06-05', 16285.75, 0.0180, 0.22, 1.15), ('VIX_INDEX', 'volatility', 'market', '2025-06-05', 18.25, -0.0850, 0.85, -0.25), ('USD_DXY', 'fx', 'currency', '2025-06-05', 104.85, 0.0065, 0.08, 0.10), ('GOLD_SPOT', 'commodity', 'precious_metals', '2025-06-05', 1998.50, 0.0095, 0.20, 0.05), ('CRUDE_OIL', 'commodity', 'energy', '2025-06-05', 75.25, 0.0215, 0.35, 0.15), ('US_10Y_YIELD', 'rates', 'government', '2025-06-05', 4.2650, 0.0025, 0.08, 0.02), ('CREDIT_SPREADS', 'credit', 'corporate', '2025-06-05', 1.85, 0.0150, 0.25, 0.35)

[node:AddSampleStressScenarios]
type = neon
label = 18. Add Sample Stress Scenarios
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = INSERT INTO risk_system.stress_scenarios (scenario_id, scenario_name, scenario_description, scenario_type, scenario_category, factor_shocks, scenario_probability, scenario_severity, historical_reference, created_by) VALUES (gen_random_uuid(), '2008 Financial Crisis', 'Severe market downturn similar to 2008 crisis with equity markets down 40%, credit spreads widening 300bp', 'historical', 'financial_crisis', '{"SP500_INDEX": -0.40, "NASDAQ_INDEX": -0.45, "CREDIT_SPREADS": 3.00, "VIX_INDEX": 2.50}', 0.02, 'severe', '2008 Global Financial Crisis', 'Risk Manager'), (gen_random_uuid(), 'COVID-19 Pandemic', 'Global pandemic scenario with initial market crash followed by recovery', 'historical', 'pandemic', '{"SP500_INDEX": -0.35, "NASDAQ_INDEX": -0.30, "USD_DXY": 0.15, "GOLD_SPOT": 0.25}', 0.05, 'high', 'COVID-19 Market Impact 2020', 'Risk Manager'), (gen_random_uuid(), 'Fed Rate Shock', 'Unexpected 200bp rate hike by Federal Reserve', 'hypothetical', 'monetary_policy', '{"US_10Y_YIELD": 2.00, "SP500_INDEX": -0.15, "TLT": -0.25, "USD_DXY": 0.10}', 0.10, 'medium', 'Volcker Era Rate Hikes', 'Risk Manager'), (gen_random_uuid(), 'China Trade War', 'Escalation of US-China trade tensions with new tariffs', 'hypothetical', 'geopolitical', '{"SP500_INDEX": -0.20, "NASDAQ_INDEX": -0.25, "USD_DXY": 0.05, "CRUDE_OIL": -0.15}', 0.15, 'medium', '2018-2019 Trade War', 'Risk Manager')

[node:GenerateCalculationID]
type = generate_uuid
label = 19. Generate VaR Calculation ID
hyphens = true

[node:CalculateHistoricalVaR]
type = neon
label = 20. Calculate Historical VaR
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = WITH lagged_prices AS (SELECT instrument_id, price_date, close_price, LAG(close_price, 1) OVER (PARTITION BY instrument_id ORDER BY price_date) as prev_close_price FROM risk_system.market_data WHERE price_date >= CURRENT_DATE - INTERVAL '252 days'), instrument_daily_pnls AS (SELECT lp.instrument_id, lp.price_date, p.portfolio_id, p.quantity * (lp.close_price - lp.prev_close_price) as instrument_pnl_impact FROM lagged_prices lp JOIN risk_system.positions p ON lp.instrument_id = p.instrument_id WHERE lp.prev_close_price IS NOT NULL AND p.portfolio_id = %s AND p.position_date = %s), daily_returns AS (SELECT portfolio_id, price_date, SUM(instrument_pnl_impact) as daily_pnl FROM instrument_daily_pnls GROUP BY portfolio_id, price_date ORDER BY price_date), percentiles AS (SELECT PERCENTILE_CONT(%s) WITHIN GROUP (ORDER BY daily_pnl) as var_95_val, PERCENTILE_CONT(%s) WITHIN GROUP (ORDER BY daily_pnl) as var_99_val, STDDEV(daily_pnl) as portfolio_volatility, COUNT(*) as observations FROM daily_returns), es_calc AS (SELECT p.var_95_val, p.var_99_val, AVG(CASE WHEN dr.daily_pnl <= p.var_95_val THEN dr.daily_pnl END) as es_95, AVG(CASE WHEN dr.daily_pnl <= p.var_99_val THEN dr.daily_pnl END) as es_99, p.portfolio_volatility, p.observations FROM daily_returns dr, percentiles p GROUP BY p.var_95_val, p.var_99_val, p.portfolio_volatility, p.observations), portfolio_value AS (SELECT SUM(market_value) as total_value FROM risk_system.positions WHERE portfolio_id = %s AND position_date = %s) SELECT es.var_95_val as var_95, es.var_99_val as var_99, es.es_95, es.es_99, es.portfolio_volatility, es.observations, portfolio_value.total_value FROM es_calc es, portfolio_value;
parameters = ["{{.Parameter.portfolio_id}}", "{{.Parameter.calculation_date}}", "{{.Parameter.confidence_level_95}}", "{{.Parameter.confidence_level_99}}", "{{.Parameter.portfolio_id}}", "{{.Parameter.calculation_date}}"]

[node:CalculateParametricVaR]
type = neon
label = 21. Calculate Parametric VaR
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = WITH position_volatilities AS (SELECT p.portfolio_id, p.instrument_id, p.market_value, p.weight, COALESCE(md.volatility, 0.20) as instrument_vol, COALESCE(md.beta, 1.0) as instrument_beta FROM risk_system.positions p LEFT JOIN risk_system.market_data md ON p.instrument_id = md.instrument_id AND md.price_date = %s WHERE p.portfolio_id = %s AND p.position_date = %s), portfolio_metrics AS (SELECT portfolio_id, SUM(market_value) as total_value, SQRT(SUM(POW(market_value * instrument_vol, 2))) as portfolio_vol_simple, SQRT(SUM(weight * weight * instrument_vol * instrument_vol) + 2 * SUM(weight * instrument_vol) * SUM(weight * instrument_vol * 0.5)) as portfolio_vol_corr FROM position_volatilities GROUP BY portfolio_id), z_scores AS (SELECT 1.645 as z_95, 2.326 as z_99), parametric_calc AS (SELECT pm.total_value, pm.portfolio_vol_simple, pm.portfolio_vol_corr, pm.total_value * pm.portfolio_vol_simple * z.z_95 * SQRT(%s) as parametric_var_95, pm.total_value * pm.portfolio_vol_simple * z.z_99 * SQRT(%s) as parametric_var_99, pm.total_value * pm.portfolio_vol_corr * z.z_95 * SQRT(%s) as parametric_var_95_corr, pm.total_value * pm.portfolio_vol_corr * z.z_99 * SQRT(%s) as parametric_var_99_corr FROM portfolio_metrics pm, z_scores z) SELECT * FROM parametric_calc
parameters = ["{{.Parameter.calculation_date}}", "{{.Parameter.portfolio_id}}", "{{.Parameter.calculation_date}}", "{{.Parameter.time_horizon}}", "{{.Parameter.time_horizon}}", "{{.Parameter.time_horizon}}", "{{.Parameter.time_horizon}}"]

[node:CalculateComponentVaR]
type = neon
label = 22. Calculate Component VaR
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = WITH position_contributions AS (SELECT p.instrument_id, p.market_value, p.weight, COALESCE(md.volatility, 0.20) as vol, COALESCE(md.beta, 1.0) as beta, p.market_value * COALESCE(md.volatility, 0.20) as risk_contribution FROM risk_system.positions p LEFT JOIN risk_system.market_data md ON p.instrument_id = md.instrument_id AND md.price_date = %s WHERE p.portfolio_id = %s AND p.position_date = %s), marginal_var AS (SELECT instrument_id, market_value, vol, beta, risk_contribution, risk_contribution / SUM(risk_contribution) OVER() as marginal_contribution, risk_contribution * 1.645 as component_var_95, risk_contribution * 2.326 as component_var_99 FROM position_contributions) SELECT instrument_id, market_value, vol, beta, risk_contribution, marginal_contribution, component_var_95, component_var_99 FROM marginal_var ORDER BY component_var_99 DESC
parameters = ["{{.Parameter.calculation_date}}", "{{.Parameter.portfolio_id}}", "{{.Parameter.calculation_date}}"]

[node:StoreVarCalculations]
type = neon
label = 23. Store VaR Calculations
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = INSERT INTO risk_system.var_calculations (calculation_id, portfolio_id, calculation_date, methodology, confidence_level, time_horizon, var_amount, var_percentage, expected_shortfall, portfolio_value, portfolio_volatility, model_parameters) VALUES (%s, %s, %s, 'historical', 0.95, %s, %s, %s, %s, %s, %s, %s), (%s, %s, %s, 'historical', 0.99, %s, %s, %s, %s, %s, %s, %s), (%s, %s, %s, 'parametric', 0.95, %s, %s, %s, NULL, %s, %s, %s), (%s, %s, %s, 'parametric', 0.99, %s, %s, %s, NULL, %s, %s, %s)
parameters = ["{{GenerateCalculationID.result.uuid}}", "{{.Parameter.portfolio_id}}", "{{.Parameter.calculation_date}}", "{{.Parameter.time_horizon}}", "{{CalculateHistoricalVaR.data.0.var_95}}", "{{(CalculateHistoricalVaR.data.0.var_95 / CalculateHistoricalVaR.data.0.total_value)::NUMERIC(8,4)}}", "{{CalculateHistoricalVaR.data.0.es_95}}", "{{CalculateHistoricalVaR.data.0.total_value}}", "{{CalculateHistoricalVaR.data.0.portfolio_volatility}}", "{\"method\": \"historical\", \"lookback\": 252}", "{{GenerateCalculationID.result.uuid}}", "{{.Parameter.portfolio_id}}", "{{.Parameter.calculation_date}}", "{{.Parameter.time_horizon}}", "{{CalculateHistoricalVaR.data.0.var_99}}", "{{(CalculateHistoricalVaR.data.0.var_99 / CalculateHistoricalVaR.data.0.total_value)::NUMERIC(8,4)}}", "{{CalculateHistoricalVaR.data.0.es_99}}", "{{CalculateHistoricalVaR.data.0.total_value}}", "{{CalculateHistoricalVaR.data.0.portfolio_volatility}}", "{\"method\": \"historical\", \"lookback\": 252}", "{{GenerateCalculationID.result.uuid}}", "{{.Parameter.portfolio_id}}", "{{.Parameter.calculation_date}}", "{{.Parameter.time_horizon}}", "{{CalculateParametricVaR.data.0.parametric_var_95}}", "{{(CalculateParametricVaR.data.0.parametric_var_95 / CalculateParametricVaR.data.0.total_value)::NUMERIC(8,4)}}", "{{CalculateParametricVaR.data.0.total_value}}", "{{CalculateParametricVaR.data.0.portfolio_vol_simple}}", "{\"method\": \"parametric\", \"correlation\": \"simple\"}", "{{GenerateCalculationID.result.uuid}}", "{{.Parameter.portfolio_id}}", "{{.Parameter.calculation_date}}", "{{.Parameter.time_horizon}}", "{{CalculateParametricVaR.data.0.parametric_var_99}}", "{{(CalculateParametricVaR.data.0.parametric_var_99 / CalculateParametricVaR.data.0.total_value)::NUMERIC(8,4)}}", "{{CalculateParametricVaR.data.0.total_value}}", "{{CalculateParametricVaR.data.0.portfolio_vol_simple}}", "{\"method\": \"parametric\", \"correlation\": \"simple\"}"]

[node:GenerateStressTestID]
type = generate_uuid
label = 24. Generate Stress Test ID
hyphens = true

[node:RunStressTests]
type = neon
label = 25. Run Stress Tests
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = WITH stress_scenarios AS (SELECT scenario_id, scenario_name, factor_shocks FROM risk_system.stress_scenarios WHERE is_active = true), portfolio_positions AS (SELECT instrument_id, market_value, quantity FROM risk_system.positions WHERE portfolio_id = %s AND position_date = %s), stress_impacts AS (SELECT ss.scenario_id, ss.scenario_name, pp.instrument_id, pp.market_value, pp.quantity, CASE WHEN pp.instrument_id IN ('AAPL', 'MSFT', 'GOOGL', 'SPY') THEN pp.market_value * COALESCE((ss.factor_shocks->>'SP500_INDEX')::DECIMAL, 0) WHEN pp.instrument_id = 'TLT' THEN pp.market_value * COALESCE((ss.factor_shocks->>'US_10Y_YIELD')::DECIMAL * -0.8, 0) WHEN pp.instrument_id = 'GLD' THEN pp.market_value * COALESCE((ss.factor_shocks->>'GOLD_SPOT')::DECIMAL, 0) ELSE pp.market_value * -0.10 END as position_impact FROM stress_scenarios ss CROSS JOIN portfolio_positions pp), scenario_totals AS (SELECT scenario_id, scenario_name, SUM(market_value) as base_value, SUM(position_impact) as total_impact FROM stress_impacts GROUP BY scenario_id, scenario_name) SELECT scenario_id, scenario_name, base_value, total_impact, (total_impact / base_value) * 100 as impact_percentage FROM scenario_totals ORDER BY total_impact
parameters = ["{{.Parameter.portfolio_id}}", "{{.Parameter.calculation_date}}"]

[node:StoreStressResults]
type = neon
label = 26. Store Stress Test Results
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = INSERT INTO risk_system.stress_results (stress_id, portfolio_id, scenario_id, test_date, base_portfolio_value, stressed_portfolio_value, pnl_impact, pnl_percentage) SELECT %s as stress_id, %s as portfolio_id, s.scenario_id, %s as test_date, s.base_value, s.base_value + s.total_impact, s.total_impact, s.impact_percentage FROM ({{RunStressTests.data}}) AS s
parameters = ["{{GenerateStressTestID.result.uuid}}", "{{.Parameter.portfolio_id}}", "{{.Parameter.calculation_date}}"]

[node:GenerateRiskAnalysisPrompt]
type = data
label = 27. Prepare Risk Analysis Data
historical_var_95 = "{{CalculateHistoricalVaR.data.0.var_95}}"
historical_var_99 = "{{CalculateHistoricalVaR.data.0.var_99}}"
parametric_var_95 = "{{CalculateParametricVaR.data.0.parametric_var_95}}"
parametric_var_99 = "{{CalculateParametricVaR.data.0.parametric_var_99}}"
portfolio_value = "{{CalculateHistoricalVaR.data.0.total_value}}"
portfolio_volatility = "{{CalculateHistoricalVaR.data.0.portfolio_volatility}}"
worst_stress_scenario = "{{RunStressTests.data.0.scenario_name}}"
worst_stress_impact = "{{RunStressTests.data.0.total_impact}}"

[node:GenerateRiskAnalysis]
type = claude
label = 28. AI Risk Analysis
api_key = "${CLAUDE_API_KEY}"
operation = messages
model = claude-3-5-sonnet-20240620
temperature = 0.2
max_tokens = 3000
messages = [
 {
   "role": "user",
   "content": "You are a senior risk management analyst. Provide a comprehensive risk assessment for Portfolio: {{.Parameter.portfolio_id}} as of {{.Parameter.calculation_date}}.\n\nRISK METRICS:\n- Portfolio Value: ${{GenerateRiskAnalysisPrompt.result.data.portfolio_value}}\n- Historical VaR (95%): ${{GenerateRiskAnalysisPrompt.result.data.historical_var_95}}\n- Historical VaR (99%): ${{GenerateRiskAnalysisPrompt.result.data.historical_var_99}}\n- Parametric VaR (95%): ${{GenerateRiskAnalysisPrompt.result.data.parametric_var_95}}\n- Parametric VaR (99%): ${{GenerateRiskAnalysisPrompt.result.data.parametric_var_99}}\n- Portfolio Volatility: {{GenerateRiskAnalysisPrompt.result.data.portfolio_volatility}}%\n- Worst Stress Scenario: {{GenerateRiskAnalysisPrompt.result.data.worst_stress_scenario}}\n- Worst Stress Impact: ${{GenerateRiskAnalysisPrompt.result.data.worst_stress_impact}}\n\nProvide:\n1. Executive Risk Summary\n2. VaR Model Comparison & Validation\n3. Stress Test Analysis\n4. Risk Concentration Assessment\n5. Regulatory Capital Implications\n6. Risk Management Recommendations\n7. Market Outlook & Risk Drivers\n\nFormat as professional risk report with clear sections and actionable insights."
 }
]

[node:GenerateRegulatoryReport]
type = claude
label = 29. Generate Regulatory Compliance Report
api_key = "${CLAUDE_API_KEY}"
operation = messages
model = claude-3-5-sonnet-20240620
temperature = 0.1
max_tokens = 2500
messages = [
 {
   "role": "user",
   "content": "Generate a regulatory compliance assessment for Portfolio {{.Parameter.portfolio_id}} based on Basel III/IV requirements.\n\nKEY METRICS:\n- Portfolio Value: ${{GenerateRiskAnalysisPrompt.result.data.portfolio_value}}\n- VaR (99%, 1-day): ${{GenerateRiskAnalysisPrompt.result.data.historical_var_99}}\n- Stress Test Worst Case: ${{GenerateRiskAnalysisPrompt.result.data.worst_stress_impact}}\n- Portfolio Volatility: {{GenerateRiskAnalysisPrompt.result.data.portfolio_volatility}}%\n\nAssess:\n1. Market Risk Capital Requirements\n2. Stress Testing Compliance (CCAR/DFAST)\n3. Risk Appetite Framework Adherence\n4. Model Risk Management\n5. Liquidity Coverage Ratio Impact\n6. Regulatory Reporting Requirements\n7. Compliance Violations & Remediation\n\nProvide specific regulatory recommendations and capital implications."
 }
]

[node:GenerateRiskRecommendations]
type = claude
label = 30. Generate Risk Management Recommendations
api_key = "${CLAUDE_API_KEY}"
operation = messages
model = claude-3-5-sonnet-20240620
temperature = 0.3
max_tokens = 2000
messages = [
 {
   "role": "user",
   "content": "As a senior risk advisor, provide specific actionable recommendations for Portfolio {{.Parameter.portfolio_id}}.\n\nCURRENT RISK PROFILE:\n- VaR (95%): ${{GenerateRiskAnalysisPrompt.result.data.historical_var_95}} ({{(GenerateRiskAnalysisPrompt.result.data.historical_var_95 / GenerateRiskAnalysisPrompt.result.data.portfolio_value * 100)::NUMERIC(8,4)}}% of portfolio)\n- Stress Test Impact: ${{GenerateRiskAnalysisPrompt.result.data.worst_stress_impact}}\n- Volatility: {{GenerateRiskAnalysisPrompt.result.data.portfolio_volatility}}%\n\nProvide:\n1. IMMEDIATE ACTIONS (next 24-48 hours)\n2. SHORT-TERM STRATEGIES (1-4 weeks)\n3. MEDIUM-TERM ADJUSTMENTS (1-6 months)\n4. HEDGING RECOMMENDATIONS\n5. POSITION SIZING ADJUSTMENTS\n6. RISK MONITORING ENHANCEMENTS\n7. PORTFOLIO OPTIMIZATION OPPORTUNITIES\n\nBe specific with instruments, quantities, and risk targets."
 }
]

[node:CalculateCorrelationMatrix]
type = neon
label = 31. Calculate Asset Correlation Matrix
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = WITH price_returns AS (SELECT md1.instrument_id as asset_1, md2.instrument_id as asset_2, CORR(md1.close_price / LAG(md1.close_price) OVER (PARTITION BY md1.instrument_id ORDER BY md1.price_date) - 1, md2.close_price / LAG(md2.close_price) OVER (PARTITION BY md2.instrument_id ORDER BY md2.price_date) - 1) as correlation FROM risk_system.market_data md1 JOIN risk_system.market_data md2 ON md1.price_date = md2.price_date WHERE md1.price_date >= CURRENT_DATE - INTERVAL '63 days' AND md1.instrument_id <= md2.instrument_id GROUP BY md1.instrument_id, md2.instrument_id HAVING COUNT(*) >= 20) INSERT INTO risk_system.correlation_matrix (calculation_date, asset_1, asset_2, correlation_coefficient, lookback_period) SELECT %s, asset_1, asset_2, correlation, 63 FROM price_returns WHERE correlation IS NOT NULL ON CONFLICT (calculation_date, asset_1, asset_2) DO UPDATE SET correlation_coefficient = EXCLUDED.correlation_coefficient, created_at = CURRENT_TIMESTAMP
parameters = ["{{.Parameter.calculation_date}}"]

[node:CalculatePortfolioMetrics]
type = neon
label = 32. Calculate Advanced Portfolio Metrics
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = WITH portfolio_data AS (SELECT p.portfolio_id, SUM(p.market_value) as total_value, COUNT(DISTINCT p.instrument_id) as num_positions, MAX(p.weight) as max_weight, STDDEV(p.weight) as weight_concentration, SUM(CASE WHEN i.instrument_type = 'equity' THEN p.market_value ELSE 0 END) / SUM(p.market_value) as equity_allocation, SUM(CASE WHEN i.instrument_type = 'etf' AND i.sector = 'Fixed Income' THEN p.market_value ELSE 0 END) / SUM(p.market_value) as bond_allocation, SUM(CASE WHEN i.sector = 'Technology' THEN p.market_value ELSE 0 END) / SUM(p.market_value) as tech_concentration FROM risk_system.positions p JOIN risk_system.instruments i ON p.instrument_id = i.instrument_id WHERE p.portfolio_id = %s AND p.position_date = %s GROUP BY p.portfolio_id), risk_metrics AS (SELECT portfolio_id, total_value, num_positions, max_weight, weight_concentration, equity_allocation, bond_allocation, tech_concentration, CASE WHEN max_weight > 0.4 THEN 'HIGH' WHEN max_weight > 0.25 THEN 'MEDIUM' ELSE 'LOW' END as concentration_risk, CASE WHEN tech_concentration > 0.5 THEN 'HIGH TECH' WHEN tech_concentration > 0.3 THEN 'MEDIUM TECH' ELSE 'DIVERSIFIED' END as sector_risk FROM portfolio_data) SELECT * FROM risk_metrics
parameters = ["{{.Parameter.portfolio_id}}", "{{.Parameter.calculation_date}}"]

[node:GenerateBacktestID]
type = generate_uuid
label = 33. Generate Backtest ID
hyphens = true

[node:RunVaRBacktest]
type = neon
label = 34. Run VaR Model Backtesting
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = WITH historical_vars AS (SELECT calculation_date, var_amount, confidence_level FROM risk_system.var_calculations WHERE portfolio_id = %s AND methodology = 'historical' AND calculation_date >= CURRENT_DATE - INTERVAL '252 days'), actual_returns AS (SELECT md.price_date, SUM(p.quantity * (md.close_price - LAG(md.close_price) OVER (PARTITION BY md.instrument_id ORDER BY md.price_date))) as actual_pnl FROM risk_system.market_data md JOIN risk_system.positions p ON md.instrument_id = p.instrument_id WHERE p.portfolio_id = %s AND md.price_date >= CURRENT_DATE - INTERVAL '252 days' GROUP BY md.price_date), backtest_results AS (SELECT hv.calculation_date, hv.var_amount, hv.confidence_level, ar.actual_pnl, CASE WHEN ar.actual_pnl < hv.var_amount THEN 1 ELSE 0 END as violation FROM historical_vars hv JOIN actual_returns ar ON hv.calculation_date = ar.price_date), violation_stats AS (SELECT confidence_level, COUNT(*) as total_obs, SUM(violation) as violations, SUM(violation)::DECIMAL / COUNT(*) as violation_rate, CASE WHEN confidence_level = 0.05 THEN 0.05 ELSE 0.01 END as expected_rate FROM backtest_results GROUP BY confidence_level) SELECT confidence_level, total_obs, violations, violation_rate, expected_rate, CASE WHEN violation_rate <= expected_rate * 1.5 THEN 'GREEN' WHEN violation_rate <= expected_rate * 2.0 THEN 'YELLOW' ELSE 'RED' END as traffic_light FROM violation_stats
parameters = ["{{.Parameter.portfolio_id}}", "{{.Parameter.portfolio_id}}"]

[node:StoreBacktestResults]
type = neon
label = 35. Store Backtesting Results
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = INSERT INTO risk_system.backtest_results (backtest_id, model_name, test_period_start, test_period_end, confidence_level, total_observations, violations, violation_rate, expected_violations, traffic_light_status) SELECT %s, 'Historical_VaR', CURRENT_DATE - INTERVAL '252 days', CURRENT_DATE, confidence_level, total_obs, violations, violation_rate, ROUND(total_obs * expected_rate), traffic_light FROM ({{RunVaRBacktest.data}}) backtest_data
parameters = ["{{GenerateBacktestID.result.uuid}}"]

[node:FetchNewOperationalIncidents]
type = neon
label = 35a. Fetch New Operational Incidents for Analysis
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = SELECT incident_id, incident_date, incident_type, description, financial_impact, root_cause, reported_by FROM risk_system.operational_incidents WHERE status = 'new' ORDER BY incident_date ASC LIMIT 10

[node:PrepareIncidentAnalysisPrompt]
type = data
label = 35b. Prepare Incident Analysis Data for AI
incidents_json = "{{to_json .FetchNewOperationalIncidents.data}}"
incident_ids = "{{to_json .FetchNewOperationalIncidents.data | jsonpath "$.[*].incident_id"}}"

[node:AnalyzeOperationalIncidents]
type = claude
label = 35c. AI Analyze Operational Incidents
api_key = "${CLAUDE_API_KEY}"
operation = messages
model = claude-3-5-sonnet-20240620
temperature = 0.3
max_tokens = 2000
messages = [
  {
    "role": "user",
    "content": "You are an operational risk expert. Analyze the following operational incidents. Identify common themes, potential root causes, and suggest specific preventative controls or process improvements. Provide an executive summary and actionable recommendations.\n\nINCIDENTS (JSON Array):\n{{PrepareIncidentAnalysisPrompt.result.data.incidents_json}}"
  }
]

[node:StoreOperationalAnalysis]
type = neon
label = 35d. Store Operational Risk Analysis (as a Report)
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = INSERT INTO risk_system.risk_reports (report_id, report_type, portfolio_id, report_date, report_content, ai_narrative, ai_recommendations, executive_summary, created_by) VALUES (%s, 'operational_risk_analysis', NULL, CURRENT_DATE, %s, %s, %s, %s, 'Risk System (AI)')
parameters = ["{{GenerateReportID.result.uuid}}", "{\"incidents_analyzed\": {{PrepareIncidentAnalysisPrompt.result.data.incidents_json}}}", "{{AnalyzeOperationalIncidents.result.content.0.text}}", "{{AnalyzeOperationalIncidents.result.content.0.text}}", "AI-driven analysis of operational incidents completed, providing insights and recommendations."]

[node:UpdateOperationalIncidentStatus]
type = neon
label = 35e. Update Operational Incident Status to 'analyzed'
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = UPDATE risk_system.operational_incidents SET status = 'analyzed' WHERE incident_id = ANY(ARRAY(SELECT jsonb_array_elements_text(%s)))
parameters = ["{{PrepareIncidentAnalysisPrompt.result.data.incident_ids}}"]

[node:LogOperationalAnalysisCompletion]
type = log_message
label = 35f. Log Operational Risk Analysis Completion
level = info
message = "Operational Risk Incidents analysis completed. Incidents processed: {{len .PrepareIncidentAnalysisPrompt.result.data.incident_ids}}. Analysis stored in report ID: {{StoreOperationalAnalysis.result.report_id}}."

[node:GenerateReportID]
type = generate_uuid
label = 36. Generate Risk Report ID
hyphens = true

[node:CompileRiskReport]
type = neon
label = 37. Compile Risk Report Data
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = SELECT json_build_object('portfolio_summary', (SELECT json_build_object('portfolio_id', %s, 'total_value', SUM(market_value), 'num_positions', COUNT(*), 'largest_position', MAX(market_value), 'avg_position_size', AVG(market_value)) FROM risk_system.positions WHERE portfolio_id = %s AND position_date = %s), 'var_metrics', (SELECT json_agg(json_build_object('methodology', methodology, 'confidence_level', confidence_level, 'var_amount', var_amount, 'var_percentage', ROUND((var_amount / portfolio_value * 100)::NUMERIC, 2))) FROM risk_system.var_calculations WHERE calculation_id = %s), 'stress_results', (SELECT json_agg(json_build_object('scenario_name', ss.scenario_name, 'impact', sr.pnl_impact, 'impact_pct', ROUND(sr.pnl_percentage::NUMERIC, 2))) FROM risk_system.stress_results sr JOIN risk_system.stress_scenarios ss ON sr.scenario_id = ss.scenario_id WHERE sr.stress_id = %s), 'risk_concentration', (SELECT json_build_object('max_position_weight', max_weight, 'concentration_risk', concentration_risk, 'sector_risk', sector_risk, 'equity_allocation', ROUND((equity_allocation * 100)::NUMERIC, 2)) FROM ({{CalculatePortfolioMetrics.data.0}})), 'backtest_status', (SELECT json_build_object('var_95_status', (SELECT traffic_light FROM ({{RunVaRBacktest.data}}) WHERE confidence_level = 0.05), 'var_99_status', (SELECT traffic_light FROM ({{RunVaRBacktest.data}}) WHERE confidence_level = 0.01)))) as report_data
parameters = ["{{.Parameter.portfolio_id}}", "{{.Parameter.portfolio_id}}", "{{.Parameter.calculation_date}}", "{{GenerateCalculationID.result.uuid}}", "{{GenerateStressTestID.result.uuid}}"]

[node:StoreRiskReport]
type = neon
label = 38. Store Complete Risk Report
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = INSERT INTO risk_system.risk_reports (report_id, report_type, portfolio_id, report_date, report_frequency, report_content, ai_narrative, ai_recommendations, regulatory_alerts, executive_summary, created_by) VALUES (%s, 'daily_risk_report', %s, %s, 'daily', %s, %s, %s, %s, %s, 'Risk System')
parameters = ["{{GenerateReportID.result.uuid}}", "{{.Parameter.portfolio_id}}", "{{.Parameter.calculation_date}}", "{{CompileRiskReport.data.0.report_data}}", "{{GenerateRiskAnalysis.result.content.0.text}}", "{{GenerateRiskRecommendations.result.content.0.text}}", "{{GenerateRegulatoryReport.result.content.0.text}}", "Risk analysis completed for {{.Parameter.portfolio_id}} showing VaR of ${{GenerateRiskAnalysisPrompt.result.data.historical_var_95}} at 95% confidence"]

[node:DefineGetVaRRoute]
type = aci
label = API.Risk.1. GET /api/risk/var/{portfolio_id}
operation = add_route
route_path = /api/risk/var/<string:portfolio_id_from_url>
methods = ["GET"]
handler = GetVaRHandler
description = Get latest VaR calculations for a portfolio

[node:FetchVaRData]
type = neon
label = API.Risk.1.1. Fetch VaR Data
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = SELECT calculation_id, portfolio_id, calculation_date, methodology, confidence_level, time_horizon, var_amount, var_percentage, expected_shortfall, portfolio_value, portfolio_volatility, model_parameters FROM risk_system.var_calculations WHERE portfolio_id = %s ORDER BY calculation_date DESC, confidence_level DESC LIMIT 10
parameters = ["{{request_data.portfolio_id_from_url}}"]

[node:DefineGetStressTestRoute]
type = aci
label = API.Risk.2. GET /api/risk/stress/{portfolio_id}
operation = add_route
route_path = /api/risk/stress/<string:portfolio_id_from_url>
methods = ["GET"]
handler = GetStressTestHandler
description = Get stress test results for a portfolio

[node:FetchStressTestData]
type = neon
label = API.Risk.2.1. Fetch Stress Test Data
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = SELECT sr.stress_id, sr.portfolio_id, sr.test_date, ss.scenario_name, ss.scenario_type, sr.base_portfolio_value, sr.stressed_portfolio_value, sr.pnl_impact, sr.pnl_percentage FROM risk_system.stress_results sr JOIN risk_system.stress_scenarios ss ON sr.scenario_id = ss.scenario_id WHERE sr.portfolio_id = %s ORDER BY sr.test_date DESC, sr.pnl_impact ASC LIMIT 20
parameters = ["{{request_data.portfolio_id_from_url}}"]

[node:DefineRunVaRCalculationRoute]
type = aci
label = API.Risk.3. POST /api/risk/var/calculate
operation = add_route
route_path = /api/risk/var/calculate
methods = ["POST"]
handler = RunVaRCalculationHandler
description = Trigger new VaR calculation for a portfolio

[node:TriggerVaRCalculation]
type = generate_uuid
label = API.Risk.3.1. Trigger VaR Calculation
hyphens = true

[node:DefineGetRiskReportRoute]
type = aci
label = API.Risk.4. GET /api/risk/report/{portfolio_id}
operation = add_route
route_path = /api/risk/report/<string:portfolio_id_from_url>
methods = ["GET"]
handler = GetRiskReportHandler
description = Get latest risk report for a portfolio

[node:FetchRiskReportData]
type = neon
label = API.Risk.4.1. Fetch Risk Report Data
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = SELECT report_id, report_type, portfolio_id, report_date, report_content, ai_narrative, ai_recommendations, regulatory_alerts, executive_summary, created_at FROM risk_system.risk_reports WHERE portfolio_id = %s ORDER BY report_date DESC LIMIT 5
parameters = ["{{request_data.portfolio_id_from_url}}"]

[node:DefineGetCorrelationMatrixRoute]
type = aci
label = API.Risk.5. GET /api/risk/correlation
operation = add_route
route_path = /api/risk/correlation
methods = ["GET"]
handler = GetCorrelationMatrixHandler
description = Get latest correlation matrix

[node:FetchCorrelationData]
type = neon
label = API.Risk.5.1. Fetch Correlation Matrix
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = SELECT asset_1, asset_2, correlation_coefficient, lookback_period, created_at FROM risk_system.correlation_matrix WHERE calculation_date = (SELECT MAX(calculation_date) FROM risk_system.correlation_matrix) ORDER BY ABS(correlation_coefficient) DESC
parameters = []

[node:DefineGetBacktestResultsRoute]
type = aci
label = API.Risk.6. GET /api/risk/backtest/{portfolio_id}
operation = add_route
route_path = /api/risk/backtest/<string:portfolio_id_from_url>
methods = ["GET"]
handler = GetBacktestResultsHandler
description = Get VaR model backtesting results

[node:FetchBacktestData]
type = neon
label = API.Risk.6.1. Fetch Backtest Results
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = SELECT backtest_id, model_name, test_period_start, test_period_end, confidence_level, total_observations, violations, violation_rate, expected_violations, traffic_light_status, created_at FROM risk_system.backtest_results ORDER BY created_at DESC LIMIT 10
parameters = []

[node:DefineCreateStressScenarioRoute]
type = aci
label = API.Risk.7. POST /api/risk/stress/scenario
operation = add_route
route_path = /api/risk/stress/scenario
methods = ["POST"]
handler = CreateStressScenarioHandler
description = Create new stress testing scenario

[node:InsertStressScenario]
type = neon
label = API.Risk.7.1. Insert New Stress Scenario
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = INSERT INTO risk_system.stress_scenarios (scenario_id, scenario_name, scenario_description, scenario_type, scenario_category, factor_shocks, scenario_probability, scenario_severity, created_by) VALUES (gen_random_uuid(), %s, %s, %s, %s, %s, %s, %s, %s) RETURNING scenario_id, scenario_name, scenario_type, created_at
parameters = ["{{request_data.scenario_name}}", "{{request_data.scenario_description}}", "{{request_data.scenario_type}}", "{{request_data.scenario_category}}", "{{request_data.factor_shocks}}", "{{request_data.scenario_probability}}", "{{request_data.scenario_severity}}", "{{request_data.created_by}}"]

[node:DefineOperationalIncidentRoute]
type = aci
label = API.OpRisk.1. POST /api/oprisk/incident
operation = add_route
route_path = /api/oprisk/incident
methods = ["POST"]
handler = LogOperationalIncidentHandler
description = Log a new operational risk incident

[node:GenerateIncidentID]
type = generate_uuid
label = API.OpRisk.1.1. Generate Incident ID
hyphens = true

[node:InsertOperationalIncident]
type = neon
label = API.OpRisk.1.2. Insert Operational Incident
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = INSERT INTO risk_system.operational_incidents (incident_id, incident_date, incident_type, description, financial_impact, root_cause, reported_by) VALUES (%s, %s, %s, %s, %s, %s, %s) RETURNING incident_id
parameters = ["{{GenerateIncidentID.result.uuid}}", "{{request_data.incident_date}}", "{{request_data.incident_type}}", "{{request_data.description}}", "{{request_data.financial_impact}}", "{{request_data.root_cause}}", "{{request_data.reported_by}}"]

[node:LogIncidentCreation]
type = log_message
label = API.OpRisk.1.3. Log Incident Creation
level = info
message = "Operational incident {{InsertOperationalIncident.result.incident_id}} of type '{{request_data.incident_type}}' reported by '{{request_data.reported_by}}' with financial impact ${{request_data.financial_impact}}."

[node:DefineGetOperationalIncidentsRoute]
type = aci
label = API.OpRisk.2. GET /api/oprisk/incidents
operation = add_route
route_path = /api/oprisk/incidents
methods = ["GET"]
handler = GetOperationalIncidentsHandler
description = Get all operational risk incidents

[node:FetchOperationalIncidents]
type = neon
label = API.OpRisk.2.1. Fetch Operational Incidents
connection_string = {{.Parameter.connection_string}}
operation = execute_query
query = SELECT incident_id, incident_date, incident_type, description, financial_impact, root_cause, status, reported_by, created_at FROM risk_system.operational_incidents ORDER BY incident_date DESC LIMIT 50
parameters = []

[node:LogRiskSystemCompletion]
type = log_message
label = 39. Log Risk System Completion
level = info
message = "🏦 FINANCIAL RISK MANAGEMENT SYSTEM READY! | Portfolio: {{.Parameter.portfolio_id}} | VaR (95%): ${{GenerateRiskAnalysisPrompt.result.data.historical_var_95}} | VaR (99%): ${{GenerateRiskAnalysisPrompt.result.data.historical_var_99}} | Portfolio Value: ${{GenerateRiskAnalysisPrompt.result.data.portfolio_value}} | Worst Stress: {{GenerateRiskAnalysisPrompt.result.data.worst_stress_scenario}} (${{GenerateRiskAnalysisPrompt.result.data.worst_stress_impact}}) | Calculation ID: {{GenerateCalculationID.result.uuid}} | Report ID: {{GenerateReportID.result.uuid}}"

[edges]
CleanupRiskDatabase = CreateRiskSchema
CreateRiskSchema = CreateInstrumentsTable
CreateInstrumentsTable = CreateMarketDataTable
CreateMarketDataTable = CreatePortfoliosTable
CreatePortfoliosTable = CreatePositionsTable
CreatePositionsTable = CreateRiskFactorsTable
CreateRiskFactorsTable = CreateVarCalculationsTable
CreateVarCalculationsTable = CreateStressScenariosTable
CreateStressScenariosTable = CreateStressResultsTable
CreateStressResultsTable = CreateRiskReportsTable
CreateRiskReportsTable = CreateCorrelationMatrixTable
CreateCorrelationMatrixTable = CreateBacktestResultsTable
CreateBacktestResultsTable = CreateOperationalIncidentsTable
CreateOperationalIncidentsTable = AddSampleInstruments
AddSampleInstruments = AddSamplePortfolio
AddSamplePortfolio = AddSampleMarketData
AddSampleMarketData = AddSamplePositions
AddSamplePositions = AddSampleRiskFactors
AddSampleRiskFactors = AddSampleStressScenarios
AddSampleStressScenarios = GenerateCalculationID
GenerateCalculationID = CalculateHistoricalVaR
CalculateHistoricalVaR = CalculateParametricVaR
CalculateParametricVaR = CalculateComponentVaR
CalculateComponentVaR = StoreVarCalculations
StoreVarCalculations = GenerateStressTestID
GenerateStressTestID = RunStressTests
RunStressTests = StoreStressResults
StoreStressResults = GenerateRiskAnalysisPrompt
GenerateRiskAnalysisPrompt = GenerateRiskAnalysis
GenerateRiskAnalysis = GenerateRegulatoryReport
GenerateRegulatoryReport = GenerateRiskRecommendations
GenerateRiskRecommendations = CalculateCorrelationMatrix
CalculateCorrelationMatrix = CalculatePortfolioMetrics
CalculatePortfolioMetrics = GenerateBacktestID
GenerateBacktestID = RunVaRBacktest
RunVaRBacktest = StoreBacktestResults
StoreBacktestResults = FetchNewOperationalIncidents
FetchNewOperationalIncidents = PrepareIncidentAnalysisPrompt
PrepareIncidentAnalysisPrompt = AnalyzeOperationalIncidents
AnalyzeOperationalIncidents = StoreOperationalAnalysis
StoreOperationalAnalysis = UpdateOperationalIncidentStatus
UpdateOperationalIncidentStatus = LogOperationalAnalysisCompletion
LogOperationalAnalysisCompletion = GenerateReportID
GenerateReportID = CompileRiskReport
CompileRiskReport = StoreRiskReport
StoreRiskReport = LogRiskSystemCompletion
DefineGetVaRRoute = FetchVaRData
DefineGetStressTestRoute = FetchStressTestData
DefineRunVaRCalculationRoute = TriggerVaRCalculation
DefineGetRiskReportRoute = FetchRiskReportData
DefineGetCorrelationMatrixRoute = FetchCorrelationData
DefineGetBacktestResultsRoute = FetchBacktestData
DefineCreateStressScenarioRoute = InsertStressScenario
DefineOperationalIncidentRoute = GenerateIncidentID
GenerateIncidentID = InsertOperationalIncident
InsertOperationalIncident = LogIncidentCreation
DefineGetOperationalIncidentsRoute = FetchOperationalIncidents

[env]
CLAUDE_API_KEY

[settings]
debug_mode = true
max_retries = 3
timeout_seconds = 600

[configuration]
agent_enabled = true
agent_name = "RiskManagementSystem"
agent_version = "1.0.0"
host = "0.0.0.0"
port = 8088
debug = true
cors_enabled = true

[deployment]
environment = "development"