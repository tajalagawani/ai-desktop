#!/usr/bin/env python3
"""
Docker Compose Generator
Generates docker-compose.yml from discovered flow files
"""

import sys
from pathlib import Path
from typing import List, Dict
from flow_discovery import FlowDiscovery


class DockerComposeGenerator:
    """Generate docker-compose.yml from flow metadata"""

    def __init__(self, flows: List[Dict], output_file: str = "docker-compose.yml"):
        self.flows = flows
        self.output_file = output_file

    def generate(self) -> str:
        """Generate complete docker-compose.yml content"""

        # Header
        compose_content = self._generate_header()

        # Services
        for flow in self.flows:
            compose_content += self._generate_service(flow)

        return compose_content

    def _generate_header(self) -> str:
        """Generate docker-compose.yml header"""
        return """# Auto-generated docker-compose.yml for ACT Multi-Flow
# Generated by docker-compose-generator.py
# DO NOT EDIT MANUALLY - Run ./startup.sh to regenerate

services:
"""

    def _generate_service(self, flow: Dict) -> str:
        """Generate a single service definition"""
        service_name = f"act-{flow['name']}"
        container_name = f"act-{flow['name']}"
        port = flow['port']
        flow_path = Path(flow['path'])

        # Make path relative to project root
        relative_flow_path = f"./flows/{flow_path.name}"

        service = f"""
  {service_name}:
    build: .
    container_name: {container_name}
    ports:
      - "{port}:{port}"
    environment:
      - PYTHONUNBUFFERED=1
      - ACT_PORT={port}
    volumes:
      - ./act:/app/act
      - {relative_flow_path}:/app/flow
    restart: unless-stopped
    networks:
      - act-network
"""
        return service

    def _generate_networks(self) -> str:
        """Generate networks section"""
        return """
networks:
  act-network:
    driver: bridge
"""

    def save(self):
        """Generate and save docker-compose.yml"""
        content = self.generate()
        content += self._generate_networks()

        output_path = Path(self.output_file)
        output_path.write_text(content, encoding='utf-8')

        print(f"✅ Generated {self.output_file}")
        print(f"   Services: {len(self.flows)}")
        print(f"   Ports: {', '.join(str(f['port']) for f in self.flows)}")

    def generate_makefile(self):
        """Generate Makefile with shortcuts for managing flows"""
        makefile_content = """# Auto-generated Makefile for ACT Multi-Flow Management
# Generated by docker-compose-generator.py

.PHONY: help start stop restart logs status rebuild clean

help:
\t@echo "ACT Multi-Flow Management"
\t@echo ""
\t@echo "Available commands:"
\t@echo "  make start      - Start all flows"
\t@echo "  make stop       - Stop all flows"
\t@echo "  make restart    - Restart all flows"
\t@echo "  make logs       - View logs from all flows"
\t@echo "  make status     - Show status of all containers"
\t@echo "  make rebuild    - Rebuild and restart all flows"
\t@echo "  make clean      - Stop and remove all containers"
\t@echo ""
"""

        # Add individual flow commands
        makefile_content += "# Individual flow commands:\n"
        for flow in self.flows:
            service_name = f"act-{flow['name']}"
            makefile_content += f"# make start-{flow['name']}, stop-{flow['name']}, logs-{flow['name']}\n"

        makefile_content += """
start:
\t@echo "🚀 Starting all flows..."
\tdocker-compose up -d

stop:
\t@echo "🛑 Stopping all flows..."
\tdocker-compose stop

restart:
\t@echo "🔄 Restarting all flows..."
\tdocker-compose restart

logs:
\tdocker-compose logs -f

status:
\t@echo "📊 Flow Status:"
\t@docker-compose ps

rebuild:
\t@echo "🔨 Rebuilding all flows..."
\tdocker-compose down
\tdocker-compose up --build -d

clean:
\t@echo "🧹 Cleaning up..."
\tdocker-compose down -v
"""

        # Add individual flow targets
        for flow in self.flows:
            service_name = f"act-{flow['name']}"
            makefile_content += f"""
start-{flow['name']}:
\tdocker-compose up -d {service_name}

stop-{flow['name']}:
\tdocker-compose stop {service_name}

restart-{flow['name']}:
\tdocker-compose restart {service_name}

logs-{flow['name']}:
\tdocker-compose logs -f {service_name}
"""

        Path("Makefile").write_text(makefile_content, encoding='utf-8')
        print(f"✅ Generated Makefile")

    def generate_status_script(self):
        """Generate status.sh script to check all flows"""
        script_content = """#!/bin/bash
# Auto-generated status checker for ACT Multi-Flow
# Shows health status of all running flows

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "📊 ACT Multi-Flow Status"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

"""

        for flow in self.flows:
            port = flow['port']
            name = flow['name']
            script_content += f"""
echo "🔍 {name} (Port {port})"
curl -s http://localhost:{port}/health 2>/dev/null | jq . || echo "   ❌ Not responding"
echo ""
"""

        script_content += """
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "Docker Container Status:"
docker-compose ps
"""

        status_path = Path("status.sh")
        status_path.write_text(script_content, encoding='utf-8')
        status_path.chmod(0o755)
        print(f"✅ Generated status.sh")


def main():
    """CLI for docker-compose generator"""
    flows_dir = sys.argv[1] if len(sys.argv) > 1 else "./flows"

    print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print("🔧 ACT Docker Compose Generator")
    print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print()

    # Discover flows
    discovery = FlowDiscovery(flows_dir)
    flows = discovery.discover_flows()

    if not flows:
        print("❌ No valid flows found")
        sys.exit(1)

    discovery.print_summary(flows)

    # Validate
    validation = discovery.validate_flows(flows)

    if validation['warnings']:
        print("⚠️  Warnings:")
        for warning in validation['warnings']:
            print(f"   • {warning}")
        print()

    if validation['errors']:
        print("❌ Validation Errors:")
        for error in validation['errors']:
            print(f"   • {error}")
        print()
        sys.exit(1)

    # Generate files
    print("🔨 Generating configuration files...")
    print()

    generator = DockerComposeGenerator(flows)
    generator.save()
    generator.generate_makefile()
    generator.generate_status_script()

    print()
    print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print("✅ Generation Complete!")
    print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print()
    print("Next steps:")
    print("  1. Review docker-compose.yml")
    print("  2. Run: make start")
    print("  3. Check status: ./status.sh")
    print()


if __name__ == "__main__":
    main()
